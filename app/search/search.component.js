"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var app = require("application");
var ZXing = require("nativescript-zxing");
var ImageSource = require("image-source");
var SearchComponent = /** @class */ (function () {
    function SearchComponent() {
        this.fname = "rrrrr";
        this.lname = "eeeeeee";
        this.email = "advait.pundlik@xoriant.com";
        this.ph1 = "8007795817";
        this.ph2 = "9876543210";
        this.data = "{\"fname\": " + this.fname + "," + "\"lname\": " + this.lname + "," + "\"email\":" + this.email + "," + "\"ph1\":" + this.ph1 + "," + "\"ph2\":" + this.ph2 + "}";
        this.barcodeText = new String();
        this.tabSelectedIndex = 1;
    }
    SearchComponent.prototype.ngOnInit = function () {
        // Init your component properties here.
    };
    SearchComponent.prototype.generateBarCode = function () {
        this.pref = require("nativescript-android-preferences");
        var fname = {
            datavalue: "",
            datatype: this.pref.DataTypes.STRING,
            prefname: "fname"
        };
        var lname = {
            datavalue: "",
            datatype: this.pref.DataTypes.STRING,
            prefname: "lname"
        };
        var email = {
            datavalue: "",
            datatype: this.pref.DataTypes.STRING,
            prefname: "email"
        };
        var ph1 = {
            datavalue: "",
            datatype: this.pref.DataTypes.STRING,
            prefname: "ph1"
        };
        this.fname = this.pref.GetPreference(lname);
        this.lname = this.pref.GetPreference(fname);
        this.email = this.pref.GetPreference(email);
        this.ph1 = this.pref.GetPreference(ph1);
        this.data = "{\"fname\": " + "\"" + this.fname + "\"" + "," + "\"lname\":" + "\"" + this.lname + "\"" + "," + "\"email\":" + "\"" + this.email + "\"" + "," + "\"ph1\":" + "\"" + this.ph1 + "\"" + "," + "\"ph2\":" + "\"" + this.ph2 + "\"" + "}";
        this.barcodeText = this.data;
        var barcodeImage = this.barcodeImg.nativeElement;
        var zx = new ZXing();
        var newImg = zx.createBarcode({
            encode: this.barcodeText,
            formats: [ZXing.QR_CODE, ZXing.ITF]
        });
        barcodeImage.imageSource = ImageSource.fromNativeSource(newImg);
    };
    SearchComponent.prototype.onDrawerButtonTap = function () {
        var sideDrawer = app.getRootView();
        sideDrawer.showDrawer();
    };
    SearchComponent.prototype.changeTab = function () {
        if (this.tabSelectedIndex === 0) {
            this.tabSelectedIndex = 1;
        }
        else if (this.tabSelectedIndex === 1) {
            this.tabSelectedIndex = 2;
        }
        else if (this.tabSelectedIndex === 2) {
            this.tabSelectedIndex = 0;
        }
    };
    SearchComponent.prototype.show = function () {
        this.pref = require("nativescript-android-preferences");
        var fname = {
            datavalue: "",
            datatype: this.pref.DataTypes.STRING,
            prefname: "fname"
        };
        var lname = {
            datavalue: "",
            datatype: this.pref.DataTypes.STRING,
            prefname: "lname"
        };
        var email = {
            datavalue: "",
            datatype: this.pref.DataTypes.STRING,
            prefname: "email"
        };
        var ph1 = {
            datavalue: "",
            datatype: this.pref.DataTypes.STRING,
            prefname: "ph1"
        };
        this.pref.GetPreference(lname);
        this.pref.GetPreference(fname);
        this.pref.GetPreference(email);
        this.pref.GetPreference(ph1);
    };
    __decorate([
        core_1.ViewChild("barcodeImg"),
        __metadata("design:type", core_1.ElementRef)
    ], SearchComponent.prototype, "barcodeImg", void 0);
    SearchComponent = __decorate([
        core_1.Component({
            selector: "Search",
            moduleId: module.id,
            templateUrl: "./search.component.html"
        }),
        __metadata("design:paramtypes", [])
    ], SearchComponent);
    return SearchComponent;
}());
exports.SearchComponent = SearchComponent;
//# sourceMappingURL=data:application/json;base64,