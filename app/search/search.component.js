"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var app = require("application");
var ZXing = require("nativescript-zxing");
var ImageSource = require("image-source");
var SearchComponent = /** @class */ (function () {
    function SearchComponent() {
        this.data = new Array("BEGIN:VCARD", "VERSION:3.0", "N:Doe;John;;;", "FN:John Doe", "ORG:Example.com Inc.;", "TITLE:Imaginary test person", "EMAIL;type=INTERNET;type=WORK;type=pref:johnDoe@example.org", "TEL;type=WORK;type=pref:+1 617 555 1212", "TEL;type=WORK:+1 (617) 555-1234", "TEL;type=CELL:+1 781 555 1212", "TEL;type=HOME:+1 202 555 1212", "item1.ADR;type=WORK:;;2 Enterprise Avenue;Worktown;NY;01111;USA", "item1.X-ABADR:us", "item2.ADR;type=HOME;type=pref:;;3 Acacia Avenue;Hoemtown;MA;02222;USA", "item2.X-ABADR:us", "NOTE:John Doe has a long and varied history\, being documented on more police files that anyone else. Reports of his death are alas numerous.", "item3.URL;type=pref:http\://www.example/com/doe", "item3.X-ABLabel:_$!<HomePage>!$_", "item4.URL:http\://www.example.com/Joe/foaf.df", "item4.X-ABLabel:FOAF", "item5.X-ABRELATEDNAMES;type=pref:Jane Doe", "item5.X-ABLabel:_$!<Friend>!$_", "CATEGORIES:Work,Test group", "X-ABUID:5AD380FD-B2DE-4261-BA99-DE1D1DB52FBE\:ABPerson", "END:VCARD");
        this.barcodeText = new String();
        this.tabSelectedIndex = 1;
    }
    SearchComponent.prototype.ngOnInit = function () {
        // Init your component properties here.
    };
    SearchComponent.prototype.generateBarCode = function () {
        this.barcodeText = this.data.toString();
        var barcodeImage = this.barcodeImg.nativeElement;
        var zx = new ZXing();
        var newImg = zx.createBarcode({
            encode: this.barcodeText,
            formats: [ZXing.QR_CODE, ZXing.ITF]
        });
        barcodeImage.imageSource = ImageSource.fromNativeSource(newImg);
    };
    SearchComponent.prototype.onDrawerButtonTap = function () {
        var sideDrawer = app.getRootView();
        sideDrawer.showDrawer();
    };
    SearchComponent.prototype.changeTab = function () {
        if (this.tabSelectedIndex === 0) {
            this.tabSelectedIndex = 1;
        }
        else if (this.tabSelectedIndex === 1) {
            this.tabSelectedIndex = 2;
        }
        else if (this.tabSelectedIndex === 2) {
            this.tabSelectedIndex = 0;
        }
    };
    __decorate([
        core_1.ViewChild("barcodeImg"),
        __metadata("design:type", core_1.ElementRef)
    ], SearchComponent.prototype, "barcodeImg", void 0);
    SearchComponent = __decorate([
        core_1.Component({
            selector: "Search",
            moduleId: module.id,
            templateUrl: "./search.component.html"
        }),
        __metadata("design:paramtypes", [])
    ], SearchComponent);
    return SearchComponent;
}());
exports.SearchComponent = SearchComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBeUU7QUFHekUsaUNBQW1DO0FBRW5DLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzVDLElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQU81QztJQTZCSTtRQTFCTyxTQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsYUFBYSxFQUNqQyxhQUFhLEVBQ2IsZUFBZSxFQUNmLGFBQWEsRUFDYix1QkFBdUIsRUFDdkIsNkJBQTZCLEVBQzdCLDZEQUE2RCxFQUM3RCx5Q0FBeUMsRUFDekMsaUNBQWlDLEVBQ2pDLCtCQUErQixFQUMvQiwrQkFBK0IsRUFDL0IsaUVBQWlFLEVBQ2pFLGtCQUFrQixFQUNsQix1RUFBdUUsRUFDdkUsa0JBQWtCLEVBQ2xCLCtJQUErSSxFQUMvSSxpREFBaUQsRUFDakQsa0NBQWtDLEVBQ2xDLCtDQUErQyxFQUMvQyxzQkFBc0IsRUFDdEIsMkNBQTJDLEVBQzNDLGdDQUFnQyxFQUNoQyw0QkFBNEIsRUFDNUIsd0RBQXdELEVBQ3hELFdBQVcsQ0FBQyxDQUFDO1FBQ1YsZ0JBQVcsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBRTlCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELGtDQUFRLEdBQVI7UUFDSSx1Q0FBdUM7SUFDM0MsQ0FBQztJQUVELHlDQUFlLEdBQWY7UUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDeEMsSUFBTSxZQUFZLEdBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDMUQsSUFBTSxFQUFFLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVztZQUN4QixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDdEMsQ0FBQyxDQUFDO1FBQ0gsWUFBWSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELDJDQUFpQixHQUFqQjtRQUNJLElBQU0sVUFBVSxHQUFrQixHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEQsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFDRCxtQ0FBUyxHQUFUO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDOUIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDTCxDQUFDO0lBM0R3QjtRQUF4QixnQkFBUyxDQUFDLFlBQVksQ0FBQztrQ0FBYSxpQkFBVTt1REFBQztJQUR2QyxlQUFlO1FBTDNCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLHlCQUF5QjtTQUN6QyxDQUFDOztPQUNXLGVBQWUsQ0E2RDNCO0lBQUQsc0JBQUM7Q0FBQSxBQTdERCxJQTZEQztBQTdEWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgSW1hZ2UgfSBmcm9tIFwidG5zLWNvcmUtbW9kdWxlcy91aS9pbWFnZVwiO1xuaW1wb3J0IHsgVGV4dEZpZWxkIH0gZnJvbSBcInVpL3RleHQtZmllbGRcIjtcbmltcG9ydCAqIGFzIGFwcCBmcm9tIFwiYXBwbGljYXRpb25cIjtcbmltcG9ydCB7IFJhZFNpZGVEcmF3ZXIgfSBmcm9tIFwibmF0aXZlc2NyaXB0LXVpLXNpZGVkcmF3ZXJcIjtcbmNvbnN0IFpYaW5nID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC16eGluZ1wiKTtcbmNvbnN0IEltYWdlU291cmNlID0gcmVxdWlyZShcImltYWdlLXNvdXJjZVwiKTtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6IFwiU2VhcmNoXCIsXG4gICAgbW9kdWxlSWQ6IG1vZHVsZS5pZCxcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3NlYXJjaC5jb21wb25lbnQuaHRtbFwiXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQFZpZXdDaGlsZChcImJhcmNvZGVJbWdcIikgYmFyY29kZUltZzogRWxlbWVudFJlZjtcbiAgICBwdWJsaWMgdGFiU2VsZWN0ZWRJbmRleDogbnVtYmVyO1xuICAgIHB1YmxpYyBkYXRhID0gbmV3IEFycmF5KFwiQkVHSU46VkNBUkRcIixcbiAgICAgICAgXCJWRVJTSU9OOjMuMFwiLFxuICAgICAgICBcIk46RG9lO0pvaG47OztcIixcbiAgICAgICAgXCJGTjpKb2huIERvZVwiLFxuICAgICAgICBcIk9SRzpFeGFtcGxlLmNvbSBJbmMuO1wiLFxuICAgICAgICBcIlRJVExFOkltYWdpbmFyeSB0ZXN0IHBlcnNvblwiLFxuICAgICAgICBcIkVNQUlMO3R5cGU9SU5URVJORVQ7dHlwZT1XT1JLO3R5cGU9cHJlZjpqb2huRG9lQGV4YW1wbGUub3JnXCIsXG4gICAgICAgIFwiVEVMO3R5cGU9V09SSzt0eXBlPXByZWY6KzEgNjE3IDU1NSAxMjEyXCIsXG4gICAgICAgIFwiVEVMO3R5cGU9V09SSzorMSAoNjE3KSA1NTUtMTIzNFwiLFxuICAgICAgICBcIlRFTDt0eXBlPUNFTEw6KzEgNzgxIDU1NSAxMjEyXCIsXG4gICAgICAgIFwiVEVMO3R5cGU9SE9NRTorMSAyMDIgNTU1IDEyMTJcIixcbiAgICAgICAgXCJpdGVtMS5BRFI7dHlwZT1XT1JLOjs7MiBFbnRlcnByaXNlIEF2ZW51ZTtXb3JrdG93bjtOWTswMTExMTtVU0FcIixcbiAgICAgICAgXCJpdGVtMS5YLUFCQURSOnVzXCIsXG4gICAgICAgIFwiaXRlbTIuQURSO3R5cGU9SE9NRTt0eXBlPXByZWY6OzszIEFjYWNpYSBBdmVudWU7SG9lbXRvd247TUE7MDIyMjI7VVNBXCIsXG4gICAgICAgIFwiaXRlbTIuWC1BQkFEUjp1c1wiLFxuICAgICAgICBcIk5PVEU6Sm9obiBEb2UgaGFzIGEgbG9uZyBhbmQgdmFyaWVkIGhpc3RvcnlcXCwgYmVpbmcgZG9jdW1lbnRlZCBvbiBtb3JlIHBvbGljZSBmaWxlcyB0aGF0IGFueW9uZSBlbHNlLiBSZXBvcnRzIG9mIGhpcyBkZWF0aCBhcmUgYWxhcyBudW1lcm91cy5cIixcbiAgICAgICAgXCJpdGVtMy5VUkw7dHlwZT1wcmVmOmh0dHBcXDovL3d3dy5leGFtcGxlL2NvbS9kb2VcIixcbiAgICAgICAgXCJpdGVtMy5YLUFCTGFiZWw6XyQhPEhvbWVQYWdlPiEkX1wiLFxuICAgICAgICBcIml0ZW00LlVSTDpodHRwXFw6Ly93d3cuZXhhbXBsZS5jb20vSm9lL2ZvYWYuZGZcIixcbiAgICAgICAgXCJpdGVtNC5YLUFCTGFiZWw6Rk9BRlwiLFxuICAgICAgICBcIml0ZW01LlgtQUJSRUxBVEVETkFNRVM7dHlwZT1wcmVmOkphbmUgRG9lXCIsXG4gICAgICAgIFwiaXRlbTUuWC1BQkxhYmVsOl8kITxGcmllbmQ+ISRfXCIsXG4gICAgICAgIFwiQ0FURUdPUklFUzpXb3JrLFRlc3QgZ3JvdXBcIixcbiAgICAgICAgXCJYLUFCVUlEOjVBRDM4MEZELUIyREUtNDI2MS1CQTk5LURFMUQxREI1MkZCRVxcOkFCUGVyc29uXCIsXG4gICAgICAgIFwiRU5EOlZDQVJEXCIpO1xuICAgIHB1YmxpYyBiYXJjb2RlVGV4dCA9IG5ldyBTdHJpbmcoKTtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy50YWJTZWxlY3RlZEluZGV4ID0gMTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgLy8gSW5pdCB5b3VyIGNvbXBvbmVudCBwcm9wZXJ0aWVzIGhlcmUuXG4gICAgfVxuXG4gICAgZ2VuZXJhdGVCYXJDb2RlKCl7XG4gICAgICAgIHRoaXMuYmFyY29kZVRleHQgPSB0aGlzLmRhdGEudG9TdHJpbmcoKTtcbiAgICAgICAgY29uc3QgYmFyY29kZUltYWdlID0gPEltYWdlPnRoaXMuYmFyY29kZUltZy5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCB6eCA9IG5ldyBaWGluZygpO1xuICAgICAgICBjb25zdCBuZXdJbWcgPSB6eC5jcmVhdGVCYXJjb2RlKHtcbiAgICAgICAgICAgIGVuY29kZTogdGhpcy5iYXJjb2RlVGV4dCxcbiAgICAgICAgICAgIGZvcm1hdHM6IFtaWGluZy5RUl9DT0RFLCBaWGluZy5JVEZdXG4gICAgICAgIH0pO1xuICAgICAgICBiYXJjb2RlSW1hZ2UuaW1hZ2VTb3VyY2UgPSBJbWFnZVNvdXJjZS5mcm9tTmF0aXZlU291cmNlKG5ld0ltZyk7XG4gICAgfVxuXG4gICAgb25EcmF3ZXJCdXR0b25UYXAoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHNpZGVEcmF3ZXIgPSA8UmFkU2lkZURyYXdlcj5hcHAuZ2V0Um9vdFZpZXcoKTtcbiAgICAgICAgc2lkZURyYXdlci5zaG93RHJhd2VyKCk7XG4gICAgfVxuICAgIGNoYW5nZVRhYigpIHtcbiAgICAgICAgaWYgKHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy50YWJTZWxlY3RlZEluZGV4ID0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhYlNlbGVjdGVkSW5kZXggPT09IDEpIHtcbiAgICAgICAgICAgIHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9IDI7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50YWJTZWxlY3RlZEluZGV4ID09PSAyKSB7XG4gICAgICAgICAgICB0aGlzLnRhYlNlbGVjdGVkSW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19