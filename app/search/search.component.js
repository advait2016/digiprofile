"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var app = require("application");
var ZXing = require("nativescript-zxing");
var ImageSource = require("image-source");
var SearchComponent = /** @class */ (function () {
    function SearchComponent() {
        this.data = new Array("BEGIN:VCARD", "VERSION:3.0", "N:Doe;John;;;", "FN:John Doe", "ORG:Example.com Inc.;", "TITLE:Imaginary test person", "EMAIL;type=INTERNET;type=WORK;type=pref:johnDoe@example.org", "TEL;type=WORK;type=pref:+1 617 555 1212", "TEL;type=WORK:+1 (617) 555-1234", "TEL;type=CELL:+1 781 555 1212", "TEL;type=HOME:+1 202 555 1212", "item1.ADR;type=WORK:;;2 Enterprise Avenue;Worktown;NY;01111;USA", "item1.X-ABADR:us", "item2.ADR;type=HOME;type=pref:;;3 Acacia Avenue;Hoemtown;MA;02222;USA", "item2.X-ABADR:us", "NOTE:John Doe has a long and varied history\, being documented on more police files that anyone else. Reports of his death are alas numerous.", "item3.URL;type=pref:http\://www.example/com/doe", "item3.X-ABLabel:_$!<HomePage>!$_", "item4.URL:http\://www.example.com/Joe/foaf.df", "item4.X-ABLabel:FOAF", "item5.X-ABRELATEDNAMES;type=pref:Jane Doe", "item5.X-ABLabel:_$!<Friend>!$_", "CATEGORIES:Work,Test group", "X-ABUID:5AD380FD-B2DE-4261-BA99-DE1D1DB52FBE\:ABPerson", "END:VCARD");
        this.barcodeText = new String();
        this.tabSelectedIndex = 1;
    }
    SearchComponent.prototype.ngOnInit = function () {
        // Init your component properties here.
    };
    SearchComponent.prototype.generateBarCode = function () {
        this.barcodeText = this.data.toString();
        var barcodeImage = this.barcodeImg.nativeElement;
        var zx = new ZXing();
        var newImg = zx.createBarcode({
            encode: this.barcodeText,
            formats: [ZXing.QR_CODE, ZXing.ITF]
        });
        barcodeImage.imageSource = ImageSource.fromNativeSource(newImg);
    };
    SearchComponent.prototype.onDrawerButtonTap = function () {
        var sideDrawer = app.getRootView();
        sideDrawer.showDrawer();
    };
    SearchComponent.prototype.changeTab = function () {
        if (this.tabSelectedIndex === 0) {
            this.tabSelectedIndex = 1;
        }
        else if (this.tabSelectedIndex === 1) {
            this.tabSelectedIndex = 2;
        }
        else if (this.tabSelectedIndex === 2) {
            this.tabSelectedIndex = 0;
        }
    };
    __decorate([
        core_1.ViewChild("barcodeImg"),
        __metadata("design:type", core_1.ElementRef)
    ], SearchComponent.prototype, "barcodeImg", void 0);
    SearchComponent = __decorate([
        core_1.Component({
            selector: "Search",
            moduleId: module.id,
            templateUrl: "./search.component.html"
        }),
        __metadata("design:paramtypes", [])
    ], SearchComponent);
    return SearchComponent;
}());
exports.SearchComponent = SearchComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBeUU7QUFHekUsaUNBQW1DO0FBRW5DLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzVDLElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQU81QztJQTZCSTtRQTFCTyxTQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsYUFBYSxFQUNqQyxhQUFhLEVBQ2IsZUFBZSxFQUNmLGFBQWEsRUFDYix1QkFBdUIsRUFDdkIsNkJBQTZCLEVBQzdCLDZEQUE2RCxFQUM3RCx5Q0FBeUMsRUFDekMsaUNBQWlDLEVBQ2pDLCtCQUErQixFQUMvQiwrQkFBK0IsRUFDL0IsaUVBQWlFLEVBQ2pFLGtCQUFrQixFQUNsQix1RUFBdUUsRUFDdkUsa0JBQWtCLEVBQ2xCLCtJQUErSSxFQUMvSSxpREFBaUQsRUFDakQsa0NBQWtDLEVBQ2xDLCtDQUErQyxFQUMvQyxzQkFBc0IsRUFDdEIsMkNBQTJDLEVBQzNDLGdDQUFnQyxFQUNoQyw0QkFBNEIsRUFDNUIsd0RBQXdELEVBQ3hELFdBQVcsQ0FBQyxDQUFDO1FBQ1YsZ0JBQVcsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBRTlCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELGtDQUFRLEdBQVI7UUFDSSx1Q0FBdUM7SUFDM0MsQ0FBQztJQUVELHlDQUFlLEdBQWY7UUFDSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDeEMsSUFBTSxZQUFZLEdBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDMUQsSUFBTSxFQUFFLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVztZQUN4QixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDdEMsQ0FBQyxDQUFDO1FBQ0gsWUFBWSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELDJDQUFpQixHQUFqQjtRQUNJLElBQU0sVUFBVSxHQUFrQixHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEQsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFDRCxtQ0FBUyxHQUFUO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDOUIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDTCxDQUFDO0lBM0R3QjtRQUF4QixnQkFBUyxDQUFDLFlBQVksQ0FBQztrQ0FBYSxpQkFBVTt1REFBQztJQUR2QyxlQUFlO1FBTDNCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLHlCQUF5QjtTQUN6QyxDQUFDOztPQUNXLGVBQWUsQ0E2RDNCO0lBQUQsc0JBQUM7Q0FBQSxBQTdERCxJQTZEQztBQTdEWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlXCI7XHJcbmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gXCJ1aS90ZXh0LWZpZWxkXCI7XHJcbmltcG9ydCAqIGFzIGFwcCBmcm9tIFwiYXBwbGljYXRpb25cIjtcclxuaW1wb3J0IHsgUmFkU2lkZURyYXdlciB9IGZyb20gXCJuYXRpdmVzY3JpcHQtdWktc2lkZWRyYXdlclwiO1xyXG5jb25zdCBaWGluZyA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtenhpbmdcIik7XHJcbmNvbnN0IEltYWdlU291cmNlID0gcmVxdWlyZShcImltYWdlLXNvdXJjZVwiKTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwiU2VhcmNoXCIsXHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9zZWFyY2guY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2VhcmNoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBWaWV3Q2hpbGQoXCJiYXJjb2RlSW1nXCIpIGJhcmNvZGVJbWc6IEVsZW1lbnRSZWY7XHJcbiAgICBwdWJsaWMgdGFiU2VsZWN0ZWRJbmRleDogbnVtYmVyO1xyXG4gICAgcHVibGljIGRhdGEgPSBuZXcgQXJyYXkoXCJCRUdJTjpWQ0FSRFwiLFxyXG4gICAgICAgIFwiVkVSU0lPTjozLjBcIixcclxuICAgICAgICBcIk46RG9lO0pvaG47OztcIixcclxuICAgICAgICBcIkZOOkpvaG4gRG9lXCIsXHJcbiAgICAgICAgXCJPUkc6RXhhbXBsZS5jb20gSW5jLjtcIixcclxuICAgICAgICBcIlRJVExFOkltYWdpbmFyeSB0ZXN0IHBlcnNvblwiLFxyXG4gICAgICAgIFwiRU1BSUw7dHlwZT1JTlRFUk5FVDt0eXBlPVdPUks7dHlwZT1wcmVmOmpvaG5Eb2VAZXhhbXBsZS5vcmdcIixcclxuICAgICAgICBcIlRFTDt0eXBlPVdPUks7dHlwZT1wcmVmOisxIDYxNyA1NTUgMTIxMlwiLFxyXG4gICAgICAgIFwiVEVMO3R5cGU9V09SSzorMSAoNjE3KSA1NTUtMTIzNFwiLFxyXG4gICAgICAgIFwiVEVMO3R5cGU9Q0VMTDorMSA3ODEgNTU1IDEyMTJcIixcclxuICAgICAgICBcIlRFTDt0eXBlPUhPTUU6KzEgMjAyIDU1NSAxMjEyXCIsXHJcbiAgICAgICAgXCJpdGVtMS5BRFI7dHlwZT1XT1JLOjs7MiBFbnRlcnByaXNlIEF2ZW51ZTtXb3JrdG93bjtOWTswMTExMTtVU0FcIixcclxuICAgICAgICBcIml0ZW0xLlgtQUJBRFI6dXNcIixcclxuICAgICAgICBcIml0ZW0yLkFEUjt0eXBlPUhPTUU7dHlwZT1wcmVmOjs7MyBBY2FjaWEgQXZlbnVlO0hvZW10b3duO01BOzAyMjIyO1VTQVwiLFxyXG4gICAgICAgIFwiaXRlbTIuWC1BQkFEUjp1c1wiLFxyXG4gICAgICAgIFwiTk9URTpKb2huIERvZSBoYXMgYSBsb25nIGFuZCB2YXJpZWQgaGlzdG9yeVxcLCBiZWluZyBkb2N1bWVudGVkIG9uIG1vcmUgcG9saWNlIGZpbGVzIHRoYXQgYW55b25lIGVsc2UuIFJlcG9ydHMgb2YgaGlzIGRlYXRoIGFyZSBhbGFzIG51bWVyb3VzLlwiLFxyXG4gICAgICAgIFwiaXRlbTMuVVJMO3R5cGU9cHJlZjpodHRwXFw6Ly93d3cuZXhhbXBsZS9jb20vZG9lXCIsXHJcbiAgICAgICAgXCJpdGVtMy5YLUFCTGFiZWw6XyQhPEhvbWVQYWdlPiEkX1wiLFxyXG4gICAgICAgIFwiaXRlbTQuVVJMOmh0dHBcXDovL3d3dy5leGFtcGxlLmNvbS9Kb2UvZm9hZi5kZlwiLFxyXG4gICAgICAgIFwiaXRlbTQuWC1BQkxhYmVsOkZPQUZcIixcclxuICAgICAgICBcIml0ZW01LlgtQUJSRUxBVEVETkFNRVM7dHlwZT1wcmVmOkphbmUgRG9lXCIsXHJcbiAgICAgICAgXCJpdGVtNS5YLUFCTGFiZWw6XyQhPEZyaWVuZD4hJF9cIixcclxuICAgICAgICBcIkNBVEVHT1JJRVM6V29yayxUZXN0IGdyb3VwXCIsXHJcbiAgICAgICAgXCJYLUFCVUlEOjVBRDM4MEZELUIyREUtNDI2MS1CQTk5LURFMUQxREI1MkZCRVxcOkFCUGVyc29uXCIsXHJcbiAgICAgICAgXCJFTkQ6VkNBUkRcIik7XHJcbiAgICBwdWJsaWMgYmFyY29kZVRleHQgPSBuZXcgU3RyaW5nKCk7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnRhYlNlbGVjdGVkSW5kZXggPSAxO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIC8vIEluaXQgeW91ciBjb21wb25lbnQgcHJvcGVydGllcyBoZXJlLlxyXG4gICAgfVxyXG5cclxuICAgIGdlbmVyYXRlQmFyQ29kZSgpe1xyXG4gICAgICAgIHRoaXMuYmFyY29kZVRleHQgPSB0aGlzLmRhdGEudG9TdHJpbmcoKTtcclxuICAgICAgICBjb25zdCBiYXJjb2RlSW1hZ2UgPSA8SW1hZ2U+dGhpcy5iYXJjb2RlSW1nLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgY29uc3QgenggPSBuZXcgWlhpbmcoKTtcclxuICAgICAgICBjb25zdCBuZXdJbWcgPSB6eC5jcmVhdGVCYXJjb2RlKHtcclxuICAgICAgICAgICAgZW5jb2RlOiB0aGlzLmJhcmNvZGVUZXh0LFxyXG4gICAgICAgICAgICBmb3JtYXRzOiBbWlhpbmcuUVJfQ09ERSwgWlhpbmcuSVRGXVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGJhcmNvZGVJbWFnZS5pbWFnZVNvdXJjZSA9IEltYWdlU291cmNlLmZyb21OYXRpdmVTb3VyY2UobmV3SW1nKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkRyYXdlckJ1dHRvblRhcCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBzaWRlRHJhd2VyID0gPFJhZFNpZGVEcmF3ZXI+YXBwLmdldFJvb3RWaWV3KCk7XHJcbiAgICAgICAgc2lkZURyYXdlci5zaG93RHJhd2VyKCk7XHJcbiAgICB9XHJcbiAgICBjaGFuZ2VUYWIoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLnRhYlNlbGVjdGVkSW5kZXggPSAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy50YWJTZWxlY3RlZEluZGV4ID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9IDI7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhYlNlbGVjdGVkSW5kZXggPT09IDIpIHtcclxuICAgICAgICAgICAgdGhpcy50YWJTZWxlY3RlZEluZGV4ID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19