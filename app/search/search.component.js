"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var app = require("application");
var ZXing = require("nativescript-zxing");
var ImageSource = require("image-source");
var SearchComponent = /** @class */ (function () {
    function SearchComponent() {
        this.data = "{ fname:" + this.fname + "lname:" + this.lname + "email:" + this.email + "ph1:" + this.ph1 + "ph2:" + this.ph2 + "}";
        this.barcodeText = new String();
        this.tabSelectedIndex = 1;
    }
    SearchComponent.prototype.ngOnInit = function () {
        // Init your component properties here.
    };
    SearchComponent.prototype.generateBarCode = function () {
        this.barcodeText = this.data;
        var barcodeImage = this.barcodeImg.nativeElement;
        var zx = new ZXing();
        var newImg = zx.createBarcode({
            encode: this.barcodeText,
            formats: [ZXing.QR_CODE, ZXing.ITF]
        });
        barcodeImage.imageSource = ImageSource.fromNativeSource(newImg);
    };
    SearchComponent.prototype.onDrawerButtonTap = function () {
        var sideDrawer = app.getRootView();
        sideDrawer.showDrawer();
    };
    SearchComponent.prototype.changeTab = function () {
        if (this.tabSelectedIndex === 0) {
            this.tabSelectedIndex = 1;
        }
        else if (this.tabSelectedIndex === 1) {
            this.tabSelectedIndex = 2;
        }
        else if (this.tabSelectedIndex === 2) {
            this.tabSelectedIndex = 0;
        }
    };
    __decorate([
        core_1.ViewChild("barcodeImg"),
        __metadata("design:type", core_1.ElementRef)
    ], SearchComponent.prototype, "barcodeImg", void 0);
    SearchComponent = __decorate([
        core_1.Component({
            selector: "Search",
            moduleId: module.id,
            templateUrl: "./search.component.html"
        }),
        __metadata("design:paramtypes", [])
    ], SearchComponent);
    return SearchComponent;
}());
exports.SearchComponent = SearchComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlYXJjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBeUU7QUFHekUsaUNBQW1DO0FBRW5DLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0FBQzVDLElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQU81QztJQWtDSTtRQUhJLFNBQUksR0FBVSxVQUFVLEdBQUMsSUFBSSxDQUFDLEtBQUssR0FBQyxRQUFRLEdBQUUsSUFBSSxDQUFDLEtBQUssR0FBRyxRQUFRLEdBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLEdBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRSxNQUFNLEdBQUUsSUFBSSxDQUFDLEdBQUcsR0FBRSxHQUFHLENBQUE7UUFFckgsZ0JBQVcsR0FBRyxJQUFJLE1BQU0sRUFBRSxDQUFDO1FBRTlCLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUtELGtDQUFRLEdBQVI7UUFDSSx1Q0FBdUM7SUFDM0MsQ0FBQztJQUVELHlDQUFlLEdBQWY7UUFFSSxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDN0IsSUFBTSxZQUFZLEdBQVUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDMUQsSUFBTSxFQUFFLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUN2QixJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDO1lBQzVCLE1BQU0sRUFBRSxJQUFJLENBQUMsV0FBVztZQUN4QixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxHQUFHLENBQUM7U0FDdEMsQ0FBQyxDQUFDO1FBQ0gsWUFBWSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELDJDQUFpQixHQUFqQjtRQUNJLElBQU0sVUFBVSxHQUFrQixHQUFHLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDcEQsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFDRCxtQ0FBUyxHQUFUO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQUM5QixDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxDQUFDLENBQUM7UUFDOUIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO1FBQzlCLENBQUM7SUFDTCxDQUFDO0lBcEV3QjtRQUF4QixnQkFBUyxDQUFDLFlBQVksQ0FBQztrQ0FBYSxpQkFBVTt1REFBQztJQUR2QyxlQUFlO1FBTDNCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLHlCQUF5QjtTQUN6QyxDQUFDOztPQUNXLGVBQWUsQ0FzRTNCO0lBQUQsc0JBQUM7Q0FBQSxBQXRFRCxJQXNFQztBQXRFWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2ltYWdlXCI7XHJcbmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gXCJ1aS90ZXh0LWZpZWxkXCI7XHJcbmltcG9ydCAqIGFzIGFwcCBmcm9tIFwiYXBwbGljYXRpb25cIjtcclxuaW1wb3J0IHsgUmFkU2lkZURyYXdlciB9IGZyb20gXCJuYXRpdmVzY3JpcHQtdWktc2lkZWRyYXdlclwiO1xyXG5jb25zdCBaWGluZyA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtenhpbmdcIik7XHJcbmNvbnN0IEltYWdlU291cmNlID0gcmVxdWlyZShcImltYWdlLXNvdXJjZVwiKTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwiU2VhcmNoXCIsXHJcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxyXG4gICAgdGVtcGxhdGVVcmw6IFwiLi9zZWFyY2guY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2VhcmNoQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBWaWV3Q2hpbGQoXCJiYXJjb2RlSW1nXCIpIGJhcmNvZGVJbWc6IEVsZW1lbnRSZWY7XHJcbiAgICB0YWJTZWxlY3RlZEluZGV4OiBudW1iZXI7XHJcbiAgICBcclxuICAgIC8qZGF0YSA9IG5ldyBBcnJheShcIkJFR0lOOlZDQVJEXCIsXHJcbiAgICAgICAgXCJWRVJTSU9OOjMuMFwiLFxyXG4gICAgICAgIFwiTjpEb2U7Sm9objs7O1wiLFxyXG4gICAgICAgIFwiRk46Sm9obiBEb2VcIixcclxuICAgICAgICBcIk9SRzpFeGFtcGxlLmNvbSBJbmMuO1wiLFxyXG4gICAgICAgIFwiVElUTEU6SW1hZ2luYXJ5IHRlc3QgcGVyc29uXCIsXHJcbiAgICAgICAgXCJFTUFJTDt0eXBlPUlOVEVSTkVUO3R5cGU9V09SSzt0eXBlPXByZWY6am9obkRvZUBleGFtcGxlLm9yZ1wiLFxyXG4gICAgICAgIFwiVEVMO3R5cGU9V09SSzt0eXBlPXByZWY6KzEgNjE3IDU1NSAxMjEyXCIsXHJcbiAgICAgICAgXCJURUw7dHlwZT1XT1JLOisxICg2MTcpIDU1NS0xMjM0XCIsXHJcbiAgICAgICAgXCJURUw7dHlwZT1DRUxMOisxIDc4MSA1NTUgMTIxMlwiLFxyXG4gICAgICAgIFwiVEVMO3R5cGU9SE9NRTorMSAyMDIgNTU1IDEyMTJcIixcclxuICAgICAgICBcIml0ZW0xLkFEUjt0eXBlPVdPUks6OzsyIEVudGVycHJpc2UgQXZlbnVlO1dvcmt0b3duO05ZOzAxMTExO1VTQVwiLFxyXG4gICAgICAgIFwiaXRlbTEuWC1BQkFEUjp1c1wiLFxyXG4gICAgICAgIFwiaXRlbTIuQURSO3R5cGU9SE9NRTt0eXBlPXByZWY6OzszIEFjYWNpYSBBdmVudWU7SG9lbXRvd247TUE7MDIyMjI7VVNBXCIsXHJcbiAgICAgICAgXCJpdGVtMi5YLUFCQURSOnVzXCIsXHJcbiAgICAgICAgXCJOT1RFOkpvaG4gRG9lIGhhcyBhIGxvbmcgYW5kIHZhcmllZCBoaXN0b3J5XFwsIGJlaW5nIGRvY3VtZW50ZWQgb24gbW9yZSBwb2xpY2UgZmlsZXMgdGhhdCBhbnlvbmUgZWxzZS4gUmVwb3J0cyBvZiBoaXMgZGVhdGggYXJlIGFsYXMgbnVtZXJvdXMuXCIsXHJcbiAgICAgICAgXCJpdGVtMy5VUkw7dHlwZT1wcmVmOmh0dHBcXDovL3d3dy5leGFtcGxlL2NvbS9kb2VcIixcclxuICAgICAgICBcIml0ZW0zLlgtQUJMYWJlbDpfJCE8SG9tZVBhZ2U+ISRfXCIsXHJcbiAgICAgICAgXCJpdGVtNC5VUkw6aHR0cFxcOi8vd3d3LmV4YW1wbGUuY29tL0pvZS9mb2FmLmRmXCIsXHJcbiAgICAgICAgXCJpdGVtNC5YLUFCTGFiZWw6Rk9BRlwiLFxyXG4gICAgICAgIFwiaXRlbTUuWC1BQlJFTEFURUROQU1FUzt0eXBlPXByZWY6SmFuZSBEb2VcIixcclxuICAgICAgICBcIml0ZW01LlgtQUJMYWJlbDpfJCE8RnJpZW5kPiEkX1wiLFxyXG4gICAgICAgIFwiQ0FURUdPUklFUzpXb3JrLFRlc3QgZ3JvdXBcIixcclxuICAgICAgICBcIlgtQUJVSUQ6NUFEMzgwRkQtQjJERS00MjYxLUJBOTktREUxRDFEQjUyRkJFXFw6QUJQZXJzb25cIixcclxuICAgICAgICBcIkVORDpWQ0FSRFwiKTsqL1xyXG5cclxuICAgICAgICBmbmFtZTpzdHJpbmc7IGxuYW1lOnN0cmluZzsgZW1haWw6c3RyaW5nOyBwaDE6c3RyaW5nIDsgcGgyOnN0cmluZzsgXHJcbiAgICAgICAgZGF0YTpzdHJpbmcgPSBcInsgZm5hbWU6XCIrdGhpcy5mbmFtZStcImxuYW1lOlwiKyB0aGlzLmxuYW1lICsgXCJlbWFpbDpcIit0aGlzLmVtYWlsICsgXCJwaDE6XCIrIHRoaXMucGgxICtcInBoMjpcIisgdGhpcy5waDIgK1wifVwiXHJcblxyXG4gICAgcHVibGljIGJhcmNvZGVUZXh0ID0gbmV3IFN0cmluZygpO1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy50YWJTZWxlY3RlZEluZGV4ID0gMTtcclxuICAgIH1cclxuXHJcblxyXG5cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICAvLyBJbml0IHlvdXIgY29tcG9uZW50IHByb3BlcnRpZXMgaGVyZS5cclxuICAgIH1cclxuXHJcbiAgICBnZW5lcmF0ZUJhckNvZGUoKSB7XHJcbiAgICBcclxuICAgICAgICB0aGlzLmJhcmNvZGVUZXh0ID0gdGhpcy5kYXRhO1xyXG4gICAgICAgIGNvbnN0IGJhcmNvZGVJbWFnZSA9IDxJbWFnZT50aGlzLmJhcmNvZGVJbWcubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBjb25zdCB6eCA9IG5ldyBaWGluZygpO1xyXG4gICAgICAgIGNvbnN0IG5ld0ltZyA9IHp4LmNyZWF0ZUJhcmNvZGUoe1xyXG4gICAgICAgICAgICBlbmNvZGU6IHRoaXMuYmFyY29kZVRleHQsXHJcbiAgICAgICAgICAgIGZvcm1hdHM6IFtaWGluZy5RUl9DT0RFLCBaWGluZy5JVEZdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgYmFyY29kZUltYWdlLmltYWdlU291cmNlID0gSW1hZ2VTb3VyY2UuZnJvbU5hdGl2ZVNvdXJjZShuZXdJbWcpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRHJhd2VyQnV0dG9uVGFwKCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHNpZGVEcmF3ZXIgPSA8UmFkU2lkZURyYXdlcj5hcHAuZ2V0Um9vdFZpZXcoKTtcclxuICAgICAgICBzaWRlRHJhd2VyLnNob3dEcmF3ZXIoKTtcclxuICAgIH1cclxuICAgIGNoYW5nZVRhYigpIHtcclxuICAgICAgICBpZiAodGhpcy50YWJTZWxlY3RlZEluZGV4ID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9IDE7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnRhYlNlbGVjdGVkSW5kZXggPT09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy50YWJTZWxlY3RlZEluZGV4ID0gMjtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMudGFiU2VsZWN0ZWRJbmRleCA9PT0gMikge1xyXG4gICAgICAgICAgICB0aGlzLnRhYlNlbGVjdGVkSW5kZXggPSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==